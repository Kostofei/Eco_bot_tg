import asyncio
from config.config import bot
from datetime import datetime
from aiogram.types import CallbackQuery
from keyboards.inline.general import UserCallbackData
from keyboards.inline.admin_ikb import answer_for_user_ikb
from keyboards.inline.start_ikb import main_menu_ikb
from models import User, Dialog, Manager
from emuns import UserRole


async def queue(callback_data: UserCallbackData, callback: CallbackQuery = None):
    user = await User.get(pk=callback_data.user_id)
    user_dialogs = await Dialog.all(user_id=user.id)
    text_for_manager = ""
    text_for_user = ""

    if callback_data.target == "Gift":
        gift = callback_data.gift
        callback_data.gift = None
        text_for_manager = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user.tg_username} ({user.tg_first_name} {user.tg_username})" \
                           f" –ø–æ–ª—É—á–∏–ª –ø–æ–¥–∞—Ä–æ–∫:\n" \
                           f"üéÅ {gift} üéÅ\n"

    if callback_data.target == "Mini_course":
        text = callback_data.details
        callback_data.details = None
        text_for_manager = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user.tg_username} ({user.tg_first_name} {user.tg_username})\n" \
                           f"{text}"

    if callback_data.target == "Calculation":
        text = callback_data.details
        callback_data.details = None
        text_for_manager = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user.tg_username} ({user.tg_first_name} {user.tg_username})\n" \
                           f"{text}"

        text_for_user = '–í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Ç–µ–±–µ –±—É–¥–µ—Ç –≤—ã—Å–ª–∞–Ω —Ç–≤–æ–π "–†–∞—Å—á–µ—Ç –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π —ç–∫–æ–Ω–æ–º–∏–∏."\n' \
                        '–î–ª—è –±–æ–ª—å—à–µ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, –Ω–∞–ø—Ä–∞–≤–ª—è—é —Ç–µ–±—è –Ω–∞ –ª–∏—á–Ω–æ–≥–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞.\n' \
                        '–û–Ω –≤—ã—à–ª–µ—Ç —Ç–µ–±–µ –≤–º–µ—Å—Ç–µ —Å —Ä–∞—Å—á–µ—Ç–æ–º üéÅ–ë–û–ù–£–°üéÅ'

    if callback_data.target == "Question":
        text_for_manager = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{user.tg_username} ({user.tg_first_name} {user.tg_username})" \
                           f" –Ω—É–∂–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è"

        text_for_user = ("–í–∞—à –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç.\n "
                         "–î–ª—è –±–æ–ª—å—à–µ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–∞–ø—Ä–∞–≤–ª—è—é —Ç–µ–±—è –Ω–∞ –ª–∏—á–Ω–æ–≥–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞\n "
                         "–°–∫–æ—Ä–æ –æ–Ω –ø–æ–¥–∫–ª—é—á–∏—Ç—Å—è –∏ –æ—Ç–≤–µ—Ç–∏—Ç –Ω–∞ —Ç–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã.")

    if callback_data.target == "Webinar":
        text_for_manager = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user.tg_username} ({user.tg_first_name} {user.tg_username})" \
                           f" –∑–∞–ø–∏—Å–∞–ª—Å—è –Ω–∞ –≤—ç–±–∏–Ω–∞—Ä"

        text_for_user = ("–í–∞—à –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç.\n "
                         "–û –≤—Ä–µ–º–µ–Ω–∏ –±–ª–∏–∂–∞–π—à–µ–≥–æ –≤—ç–±–∏–Ω–∞—Ä–∞ –º—ã –≤–∞–º —Å–æ–æ–±—â–∏–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ")

    if callback_data.target == "Order":
        text = callback_data.details
        callback_data.details = None
        text_for_manager = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{user.tg_username} ({user.tg_first_name} {user.tg_username})\n" \
                           f"{text}"

        text_for_user = "–í–∞—à –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç.\n" \
                        "–î–ª—è –±–æ–ª—å—à–µ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–∞–ø—Ä–∞–≤–ª—è—é —Ç–µ–±—è –Ω–∞ –ª–∏—á–Ω–æ–≥–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞\n" \
                        "–û–Ω –ø–æ–º–æ–∂–µ—Ç —Å –∑–∞–∫–∞–∑–æ–º."

    if len(text_for_user) > 0:
        await callback.message.delete()

        await callback.message.answer(
            text=text_for_user,
            reply_markup=await main_menu_ikb()
        )
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–º—Å, –¥–ª—è —é–∑–µ—Ä–∞, —Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º

    if user_dialogs:
        # –ï—Å–ª–∏ –¥–∏–∞–ª–æ–≥ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç

        for user_dialog in user_dialogs:
            if user_dialog and user_dialog.manager_id:
                admin = await User.get(pk=user_dialog.manager_id)

                callback_data.user_id = user.id
                callback_data.dialog_id = user_dialog.id

                await bot.send_message(
                    chat_id=admin.id,
                    text=text_for_manager,
                    reply_markup=await answer_for_user_ikb(callback_data=callback_data)
                )
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–º—Å –º–µ–Ω–µ–¥–∂–µ—Ä—É
                break

    else:
        # –ï—Å–ª–∏ –¥–∏–∞–ª–æ–≥–∞ –µ—â–µ –Ω–µ—Ç

        dialog = Dialog(
            user_id=user.id,
            created_at=datetime.now(),
            is_active=True
        )
        await dialog.save()
        # –°–æ–∑–¥–∞–ª–∏ –¥–∏–∞–ª–æ–≥

        max_count_answers = 0
        managers = await Manager.all()

        for manager in managers:
            if manager.count_answers > max_count_answers:
                max_count_answers = manager.count_answers
            else:
                continue
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –¥–∏–∞–ª–æ–≥–æ–≤ —É –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤

        count_admin_dialogs = 0

        while 1:

            if count_admin_dialogs <= (max_count_answers + 1):
                # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ, —á—Ç–æ–± –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç—å –∑–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –¥–∏–∞–ª–æ–≥–æ–≤ —É –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤

                admins = await User.all(role=UserRole.ADMIN)

                super_admins = await User.all(role=UserRole.SUPER_ADMIN)

                for super_admin in super_admins:
                    admins.append(super_admin)

                for admin in admins:
                    this_manager = await Manager.all(user_id=admin.id)

                    if this_manager[0].count_answers == count_admin_dialogs:
                        callback_data.user_id = user.id
                        callback_data.dialog_id = dialog.id

                        await bot.send_message(
                            chat_id=admin.id,
                            text=text_for_manager,
                            reply_markup=await answer_for_user_ikb(callback_data=callback_data),
                            disable_web_page_preview=True)
                # –û–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–º—Å –≤—Å–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º —Å –Ω–∞–∏–º–µ–Ω—å—à–∏–º –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ–º –¥–∏–∞–ª–æ–≥–æ–≤

                await asyncio.sleep(60)
                # –î–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º –≤—Ä–µ–º—è –≤–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É

                check_dialog = await Dialog.get(pk=dialog.id)
                if check_dialog.manager_id:
                    # –ï—Å–ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–∫—Ä–µ–ø–ª–µ–Ω
                    break

                count_admin_dialogs += 1
                # –ï—Å–ª–∏ –Ω–∏–∫—Ç–æ –Ω–µ –≤–∑—è–ª –≤ —Ä–∞–±–æ—Ç—É, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º —É –∫–æ—Ç–æ—Ä—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤ –±–æ–ª—å—à–µ.

            else:
                over_check_dialog = await Dialog.get(pk=dialog.id)
                if not over_check_dialog.manager_id:
                    # –ï—Å–ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∏ –Ω–∏–∫—Ç–æ –Ω–µ –≤–∑—è–ª –≤ —Ä–∞–±–æ—Ç—É
                    break

        # –¶–∏–∫–ª –æ—Ç—Ä–∞–±–æ—Ç–∞–ª!
